stages:
      - build
      - test
      - deploy

services:
        - docker:dind

BUILD:
        image: laristra/flecsi-third-party:ubuntu 
        stage: build
        variables:
                  GLOBAL_CI_VARIABLE: "global_ci_value"
                  GIT_SUBMODULE_STRATEGY: recursive
        script:
                - DISTRO=ubuntu
                - RUNTIME=mpi
                - mkdir ${CI_PROJECT_DIR}/build
                - cd build
                - | 
                        cmake   -DENABLE_LEGION=$LEGION \
                                -DFLECSI_RUNTIME_MODEL=$RUNTIME \
                                 ${MINIMAL:+-DCMAKE_DISABLE_FIND_PACKAGE_METIS=ON}\
                                -DFLECSI_ENABLE_TUTORIAL=$([ "$RUNTIME" = "hpx" ] \
                                                          && echo OFF || echo ON) \
                                -DENABLE_UNIT_TESTS=ON \
                                -DENABLE_PARMETIS=ON \
                                -DENABLE_COLORING=ON \
                                -DENABLE_DOXYGEN=ON \
                                -DENABLE_DOCUMENTATION=OFF \
                                 ${COVERAGE:+-DENABLE_COVERAGE_BUILD=ON} \
                                ..
                - make doxygen
                - |
                        if [ ${COVERAGE} ]; 
                        then python -m coverxygen --xml-dir doc/doxygen/xml/ \
                                                  --src-dir .. \
                                                  --output doxygen.coverage.info; 
                             wget -O codecov.sh https://codecov.io/bash;
                             bash codecov.sh -X gcov \
                                             -f doxygen.coverage.info \
                                             -F documentation; 
                             doxy-coverage --threshold 24 doc/doxygen/xml/; 
                        fi
                - make install DESTDIR=${PWD}/install 
                - rm -rf ${PWD}/install
                - cd .. 
                - |
                        if [ ${COVERAGE} ]; 
                        then if [ ${CC} = clang ]; 
                             then $HOME/.local/bin/codecov -F "${CC}" \
                                  --gcov-exec "llvm-cov gcov"; 
                             else $HOME/.local/bin/codecov -F "${CC}"; 
                             fi; 
                        fi
        artifacts:
                expire_in: 1 hour
                paths:
                        - ${CI_PROJECT_DIR}

TEST:
        image: laristra/flecsi-third-party:ubuntu 
        stage: test
        variables:
                GLOBAL_CI_VARIABLE: "global_ci_value"
        script: 
                - cd ${CI_PROJECT_DIR}/build/
                - make test ARGS="-V"
        dependencies:
                - BUILD
        artifacts:
                expire_in: 1 hour
                paths:
                        - ${CI_PROJECT_DIR}

DEPLOY:
        image: docker:latest
        stage: deploy
        variables:
                GLOBAL_CI_VARIABLE: "global_ci_value"
        services:
                - docker:dind
        script:
                - DISTRO=ubuntu 
                - RUNTIME=mpi
                - mkdir /docker
                - cp -r /builds /docker/. 
                - cd /docker${CI_PROJECT_DIR}
                - cp -v docker/Dockerfile /docker
                - sed -i "1s/fedora/${DISTRO}/" /docker/Dockerfile
                - |
                        if [[ ${CC} != gcc ]]; 
                        then TAG="_${CC}"; 
                        fi
                - |
                        if [[ ${CI_COMMIT_REF_NAME} != stable ]]; 
                        then TAG="${TAG}_${CI_COMMIT_REF_NAME//\//_}"; 
                        fi
                - docker pull $(sed -n '1s/FROM //p' /docker/Dockerfile)
                - CON=$(docker run -d laristra/flecsi-third-party:${DISTRO} /bin/bash) 
                - docker cp /docker/builds ${CON}:/home/builds
                - docker build -t laristra/flecsi-third-party:${DISTRO} /docker/ 
                - docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
                - docker push "${CI_COMMIT_REF_SLUG}:${DISTRO}_${RUNTIME}${TAG}
        dependencies:
                - TEST
        artifacts:
                expire_in: 1 hour
                paths:
                        - ${CI_PROJECT_DIR}

